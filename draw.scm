#!/usr/bin/csi -s

(require-extension cairo)
(include "mathh-constants")
(load "fractal.scm")

; square-tail
(define square-tail
  (lambda (draw-unit move-to)
    (let ((rule-unit (sqrt (+ (expt 3 2) (expt 1 2))))
          (rule-angle (- (atan (/ 1 3)))))
      (lambda (reference-points)
        (let ((A (list-ref reference-points 0))
              (B (list-ref reference-points 1)))
          (let* ((a (rotate-and-scale-down A B rule-angle rule-unit))
                 (b (rotate-and-scale-down A B (+ rule-angle PI/4) (/ rule-unit (sqrt 2))))
                 (c (rotate a b (- PI/2)))
                 (d (rotate b a PI/2)))
            (draw-unit (list A a))
            (draw-unit (list a b))
            (draw-unit (list b d))
            (draw-unit (list d B))
            (move-to a)
            (draw-unit (list a c))
            (draw-unit (list c d))
            (move-to B)))))))

(draw-fractal square-tail 4 segment
              (let ((start (cons 10 (/ ymax 2)))
                    (end (cons (- xmax 10) (/ ymax 2))))
                (lambda () 
                  (let ((image (standard-frame "square-tail.svg" (list start end))))
                    (cairo-move-to (frame-context image) 
                                   (car start) 
                                   (cdr start))
                    image))))

; dragon
(define dragon-curve
  (lambda (draw-unit move-to)
    (lambda (reference-points)
      (let* ((A (list-ref reference-points 0))
             (C (list-ref reference-points 1))
             (B (rotate-and-scale-down A C PI/4 SQRT2)))
        (draw-unit (list A B))
        (move-to C)
        (draw-unit (list C B))
        (move-to C)))))
      
(draw-fractal dragon-curve 16 segment
              (let ((start (cons (/ xmax 4) (/ ymax 3)))
                    (end (cons (* xmax 7 (/ 8)) (/ ymax 3))))
                (lambda () 
                  (let ((image (standard-frame "dragon-curve.svg" (list start end))))
                    (cairo-move-to (frame-context image) 
                                   (car start) 
                                   (cdr start))
                    image))))

; windmill - doesn't quite fit together yet
(define open-triangle
  (lambda (context reference-points)
    (let ((A (list-ref reference-points 0))
          (B (list-ref reference-points 1))
          (C (list-ref reference-points 2)))
      (let* ((long-angle (* 5 PI (/ 6)))
             (long-side (sqrt (+ 3 4 (- (* 4 SQRT3 (cos long-angle))))))
             (rule-angle (asin (* (/ SQRT3 long-side) (sin long-angle))))
             (short-side (/ (sin (+ (/ PI 3)
                                    rule-angle))
                            (sin (- (/ PI 3)
                                    rule-angle)))))
        (segment context (list A B))
        (segment context (list B (scale-down B C short-side)))))))

(define windmill
  (lambda (draw-unit move-to)
    (let* ((long-angle (* 5 PI (/ 6)))
           (long-side (sqrt (+ 3 4 (- (* 4 SQRT3 (cos long-angle))))))
           (rule-unit (/ long-side 2))
           (rule-angle (asin (* (/ SQRT3 long-side) (sin long-angle)))))
      (lambda (reference-points)
        (let ((A (list-ref reference-points 0))
              (B (list-ref reference-points 1))
              (C (list-ref reference-points 2)))
          (let ((a (rotate-and-scale-down A B rule-angle rule-unit))
                (b (rotate-and-scale-down B C rule-angle rule-unit))
                (c (rotate-and-scale-down C A rule-angle rule-unit)))
            (let ((e (scale-down a c 0.5))
                  (f (scale-down b a 0.5))
                  (g (scale-down c b 0.5)))
              (move-to A)
              (draw-unit (list A a e))
              (move-to B)
              (draw-unit (list B b f))
              (move-to C)
              (draw-unit (list C c g)))))))))

(draw-fractal windmill 8 open-triangle
              (let ((A (cons (/ xmax 2) 
                             10))
                    (B (cons (+ (/ xmax 2) 
                                (/ (- ymax 210)
                                   SQRT3))
                             (- ymax 200)))
                    (C (cons (- (/ xmax 2)
                                (/ (- ymax 210)
                                   SQRT3))
                             (- ymax 200))))
                (lambda ()
                  (standard-frame "windmill.svg" (list A B C)))))


; not working
;(define slant-tail
;  (lambda (draw-unit move-to)
;    (let ((rule-unit (sqrt (+ (expt 2.5 2) (expt (/ SQRT3 2) 2))))
;          (rule-angle (- (atan (/ (/ SQRT3 2) 2.5)))))
;      (lambda (A B)
;        (let* ((b (rotate-and-scale-down A B (+ rule-angle (/ PI 3)) rule-unit))
;               (a (rotate b A (/ PI 3)))
;               (c (rotate a b (- (* 2 PI (/ 3)))))
;               (d (rotate b a (/ PI 3))))
;            (draw-unit A a)
;            (draw-unit a b)
;            (draw-unit b d)
;            (draw-unit d B) 
;            (move-to a)
;            (draw-unit a c)
;            (draw-unit c d)
;            (move-to B))))))
;
;(define spiral
;  (lambda (draw-unit move-to)
;    (let ((rule-unit SQRT3)
;          (rule-angle (- (atan (/ SQRT3)))))
;      (lambda (A B)
;        (let ((C (rotate-and-scale-down A B rule-angle rule-unit)))
;          (draw-unit A C)
;          (draw-unit C B))))))

